{
    "MON": [], //[08-09, 11-12, 15-18]
    "TUE": [],
    "WED": [],
    "THU": [],
    "FRI": [],
    "SAT": [],
    "SUN": []
}, 
{
 ["2023-05-15",[08-09, 14-15]]
}

1. 預設蓋日期時間(日期需顯示星期幾, 才能批次修改，若已是手動變更，則不在每日變更範圍內，只能透過手動才能變更)
2. 產生一個月的日期？
3. 透過批次更新
    - 修改這個月，明天以後的日期時間
    - 修改下個月的每日時間(以今天的月份為主)

survy:
1. 產生日期的套件？



{
    "title": "王牌家教老師",
    "teaching_category": ["國一國文","國一數學","高一英文"],
    "introduction": "<p>多年教學經驗，讓我開始思考，為什麼孩子對於數學的認知及學習程度會有落差？</p><p>要如何幫助孩子們不排斥數學、喜歡上數學、甚至愛上數學呢？讓Kiki老師來告訴你！</p>",
    "educational_background": ["台大數學系", "台大應數所"],
    "work_experience": ["2013 - 2018 學生一對一家教", "2018 - 2023 私人補習班"],
    "notice": "用Zoom上課，請提早上線等候！",
    "teaching_introduction": [
        {
            "teaching_category": "國中",
            "subject" : "數學",
            "teaching_content": "整數的運算、分數的運算、一元一次方程式、二元一次聯立方程式、直角坐標與二元一次方程式的圖形、比與比例式、一元一次不等式、統計、生活中的幾何"
        }
    ]
}



{
    "routine_dayTime": {
        "MON": [
            {
                "start_time": "09:00",
                "end_time": "10:00"
            },
            {
                "start_time": "10:00",
                "end_time": "12:00"
            }
        ],
        "TUE": [
            {
                "start_time": "13:00",
                "end_time": "17:00"
            }
        ],
        "WED": [
            {
                "start_time": "10:00",
                "end_time": "12:00"
            },
            {
                "start_time": "18:00",
                "end_time": "20:00"
            }
        ],
        "THU": [
            {
                "start_time": "14:00",
                "end_time": "17:00"
            },
            {
                "start_time": "18:00",
                "end_time": "22:00"
            }
        ],
        "FRI": [
            {
                "start_time": "18:00",
                "end_time": "22:00"
            }
        ],
        "SAT": [
            {
                "start_time": "13:00",
                "end_time": "17:00"
            }
        ],
        "SUN": [
            {
                "start_time": "09:00",
                "end_time": "12:00"
            }
        ]
    }
    "dates": [
        {
            "year": 2023,
            "months": [
                {
                    "month": 1,
                    "days": [
                        {
                            "day": 1,
                            "time_slots": [
                                {
                                    "start_time": "09:00",
                                    "end_time": "10:00"
                                },
                                {
                                    "start_time": "10:00",
                                    "end_time": "12:00"
                                },
                                {
                                    "start_time": "14:00",
                                    "end_time": "17:00"
                                }
                            ]
                        },
                        {
                            "day": 2,
                            "time_slots": [
                                {
                                    "start_time": "14:00",
                                    "end_time": "15:00"
                                },
                                {
                                    "start_time": "15:00",
                                    "end_time": "17:00"
                                },
                                {
                                    "start_time": "20:00",
                                    "end_time": "22:00"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}



    "data": {
        "_id": "6469d9722de5c9abac9277b2",
        "tutorId": "6469d9722de5c9abac9277ae",
        "dates": [
            {
                "year": 2023,
                "months": [
                    {
                        "month": 5,
                        "days": [
                            {
                                "day": 17,
                                "time_slots": [
                                    {
                                        "start_time": "08:00",
                                        "end_time": "11:00",
                                        "flag": false,
                                        "_id": "646b888987dfd2a0eb61abe7"
                                    },
                                    {
                                        "start_time": "13:00",
                                        "end_time": "17:00",
                                        "flag": false,
                                        "_id": "646b888987dfd2a0eb61abe8"
                                    },
                                    {
                                        "start_time": "18:00",
                                        "end_time": "20:00",
                                        "flag": false,
                                        "_id": "646b888987dfd2a0eb61abe9"
                                    }
                                ],
                                "_id": "646a51e8b96dcad1e9109a50"
                            },
                        ],
                        "_id": "646a51e8b96dcad1e9109a4f"
                    }
                ],
                "_id": "646a51e8b96dcad1e9109a4e"
            }
        ]
    }

若我有一筆外部資料傳入：

{
    "year": 2024,
    "months": [
        {
            "month": 1,
            "days": [
                {
                    "day": 1,
                    "time_slots": [
                        {
                            "start_time": "09:00",
                            "end_time": "10:00"
                        },
                        {
                            "start_time": "10:00",
                            "end_time": "12:00"
                        },
                        {
                            "start_time": "14:00",
                            "end_time": "17:00"
                        }
                    ]
                },
                {
                    "day": 2,
                    "time_slots": [
                        {
                            "start_time": "14:00",
                            "end_time": "15:00"
                        },
                        {
                            "start_time": "15:00",
                            "end_time": "17:00"
                        },
                        {
                            "start_time": "20:00",
                            "end_time": "22:00"
                        }
                    ]
                }
            ]
        }
    ]
}

{
    "year": 2023,
    "months": [
        {
            "month": 5,
            "days": [
                {
                    "day": 7,
                    "time_slots": [
                        [ '08:00', '10:00' ], [ '10:00', '12:00' ] 
                    ]
                    "flag":true
                },
                {
                    "day": 14,
                    "time_slots": [
                        [ '08:00', '10:00' ], [ '10:00', '12:00' ] 
                    ]
                },
                {
                    "day": 21,
                    "time_slots": [
                        [ '08:00', '10:00' ], [ '10:00', '12:00' ] 
                    ]
                },
                {
                    "day": 28,
                    "time_slots": [
                        [ '08:00', '10:00' ], [ '10:00', '12:00' ] 
                    ]
                },
            ]
        }
    ]
}

{
    '0': [ [ '08:00', '10:00' ], [ '10:00', '12:00' ] ],
    '1': [ [ '14:00', '15:00' ], [ '15:00', '16:00' ], [ '16:00', '17:00' ] ],
    '2': [ [ '17:00', '18:00' ], [ '19:00', '21:00' ] ],
    '3': [ [ '18:00', '20:00' ], [ '21:00', '22:00' ] ],
    '4': [ [ '08:00', '09:00' ], [ '09:00', '10:00' ] ],
    '5': [ [ '09:00', '10:00' ], [ '16:00', '18:00' ] ],
    '6': [ [ '08:00', '10:00' ], [ '13:00', '14:00' ], [ '14:00', '16:00' ], [ '17:00', '20:00' ]]
}


{
    "status": "success",
    "data": {
        "_id": "6471760377d41e94b24fe00e",
        "tutorId": "6471760377d41e94b24fe00a",
        "dates": [
            {
                "year": 2023,
                "months": [
                    {
                        "month": 5,
                        "days": [
                            {
                                "day": 30,
                                "time_slots": [
                                    [
                                        "17:00",
                                        "18:00"
                                    ],
                                    [
                                        "19:00",
                                        "21:00"
                                    ]
                                ],
                                "flag": false,
                                "_id": "6471761577d41e94b24fe029"
                            },
                            {
                                "day": 31,
                                "time_slots": [
                                    [
                                        "18:00",
                                        "20:00"
                                    ],
                                    [
                                        "21:00",
                                        "22:00"
                                    ]
                                ],
                                "flag": false,
                                "_id": "6471761577d41e94b24fe031"
                            },
                        ],
                        "_id": "6471761577d41e94b24fe013"
                    },
                    {
                        "month": 6,
                        "days": [
                            {
                                "day": 7,
                                "time_slots": [
                                    [
                                        "08:00",
                                        "10:00"
                                    ],
                                    [
                                        "10:00",
                                        "12:00"
                                    ]
                                ],
                                "flag": false,
                                "_id": "64717670832f6d5ce0c1c3fb"
                            }
                        ]
                    }
                ],
                "_id": "6471761577d41e94b24fe012"
            }
        ]
    }
}



"data": {
    "_id": "6471760377d41e94b24fe00e",
    "tutorId": "6471760377d41e94b24fe00a",
    "dates": [
        {
            "year": 2023,
            "months": [
                {
                    "month": 5,
                    "days": [
                        {
                            "day": 30,
                            "time_slots": [
                                [
                                    "17:00",
                                    "18:00"
                                ],
                                [
                                    "19:00",
                                    "21:00"
                                ]
                            ],
                            "flag": false,
                        },
                        {
                            "day": 31,
                            "time_slots": [
                                [
                                    "18:00",
                                    "20:00"
                                ],
                                [
                                    "21:00",
                                    "22:00"
                                ]
                            ],
                            "flag": false,
                        },
                    ],
                },
                {
                    "month": 6,
                    "days": [
                        {
                            "day": 7,
                            "time_slots": [
                                [
                                    "08:00",
                                    "10:00"
                                ],
                                [
                                    "10:00",
                                    "12:00"
                                ]
                            ],
                            "flag": false,
                        }
                    ]
                }
            ],
        }
    ]
}


const customiError = require('../errorHandler/customiError');
const successHandle = require('../service/successHandler');
const TutorSchedule = require('../models/tutorScheduleModel');
const { default: mongoose } = require('mongoose');

const tutorScheduleController = {
    // 取得單一教師 - 行事曆設定 (v-calendar 格式, 依照 年度 跟 月份區間篩選)
    async getScheduleV(req, res, next){
        /**
        * #swagger.tags = ['TutorSchedule (v-calendar)'],
        * #swagger.description = '取得單一教師 - 行事曆資料（特定 年度 及 月份區間）'
        * #swagger.parameters['year'] = {
            in: 'query',
            name: 'year',
            description: '請輸入年度，如： 2023',
            schema: {
                type: 'integer'
            },
            required: true
        }
        * #swagger.parameters['startMonth'] = {
            in: 'query',
            name: 'startMonth',
            description: '請輸入開始月份，如： 5',
            schema: {
                type: 'integer'
            },
            required: true
        }
        * #swagger.parameters['endMonth'] = {
            in: 'query',
            name: 'endMonth',
            description: '請輸入結束月份，如： 5',
            schema: {
                type: 'integer'
            },
            required: true
        }
        #swagger.responses[200] = {
            description: 'OK',
            schema :
            {
                "status": "success",
                "data": {
                    "routine_dayTime": {
                        "0": [
                            [
                                "08:00",
                                "12:00"
                            ]
                        ],
                        "1": [
                            [
                                "14:00",
                                "15:00"
                            ],
                            [
                                "15:00",
                                "16:00"
                            ],
                            [
                                "16:00",
                                "17:00"
                            ]
                        ],
                        "2": [
                            [
                                "17:00",
                                "18:00"
                            ],
                            [
                                "19:00",
                                "21:00"
                            ]
                        ],
                        "3": [
                            [
                                "18:00",
                                "20:00"
                            ]
                        ],
                        "4": [
                            [
                                "08:00",
                                "09:00"
                            ]
                        ],
                        "5": [
                            [
                                "09:00",
                                "10:00"
                            ]
                        ],
                        "6": [
                            [
                                "08:00",
                                "10:00"
                            ]
                        ],
                        "_id": "64734f5a89a535508f0d834a"
                    },
                    "dates": [
                        [
                            2023,
                            5,
                            20,
                            "09:00",
                            "10:00"
                        ],
                        [
                            2023,
                            5,
                            20,
                            "10:00",
                            "12:00"
                        ],
                        [
                            2023,
                            5,
                            21,
                            "09:00",
                            "10:00"
                        ],
                    ]
                }
            }
        }
         * #swagger.security = [{
            "JwtToken" : []
            }]
         */
        try {
            const id = req.params.tutorId;
            const inputYear = parseInt(req.query.year);
            const inputStartMonth = parseInt(req.query.startMonth);
            const inputEndMonth = parseInt(req.query.endMonth);
            const schedule = await TutorSchedule.aggregate([
                {
                    $match: { $expr: { $eq: ['$tutorId', { $toObjectId: id }] } }
                },
                {
                    $project: {
                        tutorId: 1,
                        routine_dayTime: 1,
                        dates: {
                            $map: {
                                input: "$dates",
                                as: "date",
                                in: {
                                    year: "$$date.year",
                                    months: {
                                        $filter: {
                                            input: "$$date.months",
                                            as: "month",
                                            cond: {
                                                $and: [
                                                    { $eq: [ "$$date.year", inputYear ] },
                                                    { $gte: [ "$$month.month", inputStartMonth ] },
                                                    { $lte: [ "$$month.month", inputEndMonth ] }
                                                ]
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                {   // 過濾資料中 dates 陣列中的元素，只留下其中的 months 陣列長度不為 0 的元素。
                    $project: {
                        tutorId: 1,
                        routine_dayTime: 1,
                        dates: { 
                            $filter: { 
                                input: "$dates", 
                                as: "date", 
                                cond: { 
                                    $ne: [ { $size: "$$date.months" }, 0 ] 
                                } 
                            } 
                        }
                    }
                }
            ]);
            // console.log(JSON.stringify(schedule[0].dates, null, 2));
            let dateData = schedule[0];
            const result = dateData.dates.reduce((aryRS, date) => {
                const year = date.year;
                date.months.forEach(month => {
                    const monthValue = month.month;
                    
                    month.days.forEach(day => {
                        const dayValue = day.day;
                        
                        day.time_slots.forEach(timeSlot => {
                            const sTime = timeSlot[0];
                            const eTime = timeSlot[1];

                            const aryV = [year, monthValue, dayValue, sTime, eTime];
                            aryRS.push(aryV);
                        })
                    })
                })

                return aryRS;
            }, []);
            if(result) {
                // 組合回傳結果
                const data = {};
                data["routine_dayTime"] = dateData.routine_dayTime;
                data["dates"] = result;
                // console.log(data);
                successHandle(res, data);
            } else {
                return next(customiError(400, "無此 ID 帳號資訊"))
            }
        } catch(err) {
            return next(err);
        }
    }, 
    // 更新單一教師 - 常規行事曆設定（依照年度、月份區間）
    async updateRoutineScheduleV(req, res, next){
        /**
         * #swagger.tags = ['TutorSchedule (v-calendar)'],
         * #swagger.description = '更新單一教師 - 常規行事曆設定（依照年度、月份區間）
         * #swagger.parameters['body'] = {
                in : 'body',
                type : 'object',
                required : true,
                description : '資料格式',
                schema : 
                {
                    $year: 2023,
                    $month: 5,
                    $data: []
                }
            }    
         * #swagger.security = [{
            "JwtToken" : []
            }]
         */

        // 將同一星期的日期放在同一個陣列中
        async function getDatesByWeekday(year, month) {
            // O: SUN
            // 1: MON
            // 2: TUE
            // 3: WED
            // 4: THS
            // 5: FRI
            // 6: SAT

            const datesByWeekday = {
                '0': [],
                '1': [],
                '2': [],
                '3': [],
                '4': [],
                '5': [],
                '6': [],
            };
        
            const lastDayOfMonth = new Date(year, month, 0);
        
            for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
                const currentDate = new Date(year, month - 1, day);
                const weekday = currentDate.getDay().toString();
                datesByWeekday[weekday].push(day);
            }
        
            return datesByWeekday;
        }
        // 將同一星期的時段設定放在同一個陣列中
        async function getGroupedData(data) {
            const groupedData = data.reduce((result, item) => {
                const day = item[0];
                const timeSlot = [item[1], item[2]];
            
                if (!result[day]) {
                    result[day] = [];
                }
            
                result[day].push(timeSlot);
            
                return result;
            }, {});
            return groupedData;
        }

        // 更新 routine Time
        async function updateRoutineTime(id, routineData) {
            try {
                const updatedSchedule = await TutorSchedule.findOneAndUpdate(
                    { "tutorId" : id}, 
                    { routine_dayTime: routineData}, 
                    { new : true});
                return '更新資料成功'
            } catch(err) {
                return next(err);
            }
        }

        // 更新 或 新增資料到資料庫
        async function updateOrCreateData(id, targetYear, targetMonth, dayData, timeSlotsData) {
            try {
                // console.log(id, targetYear, targetMonth, dayData, timeSlotsData)
                // 取得今天日期的年、月、日
                const today = new Date();
                const todayYear = today.getFullYear();
                const todayMonth = today.getMonth() + 1;
                const todayDay = today.getDate();

                const tutorSchedule = await TutorSchedule.findOne({
                    tutorId: id,
                    'dates.year': targetYear,
                    'dates.months.month': targetMonth,
                });
                if (tutorSchedule) {
                    // 找到對應的 TutorSchedule 資料
                    const yearData = tutorSchedule.dates.find((year) => year.year === targetYear);
                    const monthData = yearData.months.find((month) => month.month === targetMonth);
                    dayData.forEach((day) => {
                        // 只有在今天日期之後的日期才進行更新或新增資料
                        if (
                            targetYear > todayYear ||
                            (targetYear === todayYear && targetMonth > todayMonth) ||
                            (targetYear === todayYear && targetMonth === todayMonth && day >= todayDay))
                        {
                            const existingDayData = monthData.days.find((d) => d.day === day);

                            if (existingDayData) {
                                // 更新現有的 day 資料，但僅當 flag 為 false 時更新
                                if (!existingDayData.flag) {
                                    existingDayData.time_slots = timeSlotsData;
                                }
                            } else {
                                // 新增新的 day 資料
                                monthData.days.push({
                                    day: day,
                                    time_slots: timeSlotsData,
                                    flag: false, // 預設 flag 為 false
                                });
                            }
                        }
                    });

                    await tutorSchedule.save();

                } else {
                    const today = new Date();
                    const dbYear = await TutorSchedule.findOne({
                        tutorId : id,
                        "dates.year": targetYear});
                    // 若資料庫無該「年度」的資料，則新增資料
                    if (!dbYear) {
                        const newTutorSchedule = await TutorSchedule.findOneAndUpdate(
                            {
                                tutorId: id,
                            },
                            {
                                $push: {
                                    dates: {
                                        year: targetYear,
                                        months: [
                                            {
                                                month: targetMonth,
                                                    days: dayData.map((day) => {
                                                        const currentDate = new Date(targetYear, targetMonth - 1, day);
                                                        const isAfterToday = currentDate > today;
                                                        if (isAfterToday) {
                                                        return {
                                                            day: day,
                                                            time_slots: timeSlotsData,
                                                            flag: false,
                                                        };
                                                        } else {
                                                            return null; // 或者可以返回一個特殊值，表示不滿足條件，可以在後續處理中忽略這些日期
                                                        }
                                                }).filter(Boolean)
                                            },
                                        ],
                                    },
                                },
                            },
                            {
                                new: true,
                            }
                        );
                        if (newTutorSchedule) {
                            await newTutorSchedule.save();
                        }
                    }
                    // 確認 database 中是否有該「月份」的資料
                    const dbMonth = await TutorSchedule.findOne({
                        tutorId : id,
                        "dates.months.month": targetMonth});
                    // 若資料庫無該「月份」的資料，則新增資料
                    if (!dbMonth) {
                        const newTutorSchedule = await TutorSchedule.findOneAndUpdate(
                            {
                                tutorId: id,
                                'dates.year': targetYear,
                            },
                            {
                                $push: {
                                    'dates.$[outer].months': [
                                        {
                                            month: targetMonth,
                                            days: dayData.map((day) => {
                                                const currentDate = new Date(targetYear, targetMonth - 1, day);
                                                const isAfterToday = currentDate > today;
                                                if (isAfterToday) {
                                                return {
                                                    day: day,
                                                    time_slots: timeSlotsData,
                                                    flag: false,
                                                };
                                                } else {
                                                    return null; // 或者可以返回一個特殊值，表示不滿足條件，可以在後續處理中忽略這些日期
                                                }
                                            }).filter(Boolean)
                                        },
                                    ],
                                },
                            },
                            {
                                new: true,
                                arrayFilters: [{ 'outer.year': targetYear }],
                            }
                        );
                        if (newTutorSchedule) {
                            await newTutorSchedule.save();
                        }
                    }
                }
            } catch (err) {
                return res.status(500).json({ error: err.message }); 
            }
        }

        // 今天的日期：年、月、日
        const today = new Date();
        const year = today.getFullYear();
        const month = today.getMonth() + 1;
        const day = today.getDate();
        
        // 前端傳來的資料
        // tutorId
        const id = req.params.tutorId;

        const { body } = req;
        // 年度
        const targetYear = parseInt(body.year);
        console.log(targetYear);
        // 月份
        const targetMonth = parseInt(body.month);
        console.log(targetMonth);
        // 常規時段資料
        const data = body.data;

        // 將月份對應日期整理：
        const datesByWeekday = await getDatesByWeekday(year, month);

        // 整理後的 時段 集合
        const routineData = await getGroupedData(data);
        // const routineData = {
        //     '0': [ [ '08:00', '10:00' ], [ '10:00', '12:00' ] ]}
        const aryDatesByWeekday = Object.entries(datesByWeekday);
        // const aryDatesByWeekday = [[ '0', [ 7, 14, 21, 28 ]]]

        try {
            // 更新 routine_dayTime 的資料集
            await updateRoutineTime(id, routineData);

            // 更新 整月日期 的時段資料
            for(var i=0 ; i< aryDatesByWeekday.length; i++) {
                const aryDate = aryDatesByWeekday[i][1];  //同星期日期集合，格式：[7, 14, 21, 28]
                const aryTimeSlot = routineData[aryDatesByWeekday[i][0]]; //同星期時段集合，格式：[ [ '09:00', '10:00' ], [ '16:00', '18:00' ] ]
                await updateOrCreateData(id, targetYear, targetMonth, aryDate, aryTimeSlot);
            }
            const data = await getScheduleV(req, res, next);
            successHandle(res, data);
        } catch(err) {
            return next(err);  
        }
    }   
}

module.exports = tutorScheduleController;
